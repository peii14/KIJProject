/****************************************************************************
** Meta object code from reading C++ file 'tst_arithmetictests.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.2.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_arithmetictests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.2.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_arithmetictests_t {
    const uint offsetsAndSize[52];
    char stringdata0[645];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(offsetof(qt_meta_stringdata_arithmetictests_t, stringdata0) + ofs), len 
static const qt_meta_stringdata_arithmetictests_t qt_meta_stringdata_arithmetictests = {
    {
QT_MOC_LITERAL(0, 15), // "arithmetictests"
QT_MOC_LITERAL(16, 32), // "arithmeticAssignmentAdditionTest"
QT_MOC_LITERAL(49, 0), // ""
QT_MOC_LITERAL(50, 35), // "arithmeticAssignmentSubtracti..."
QT_MOC_LITERAL(86, 38), // "arithmeticAssignmentMultiplic..."
QT_MOC_LITERAL(125, 32), // "arithmeticAssignmentDivisionTest"
QT_MOC_LITERAL(158, 30), // "arithmeticAssignmentModuloTest"
QT_MOC_LITERAL(189, 33), // "binaryArithmeticWithIntStrBig..."
QT_MOC_LITERAL(223, 25), // "binaryArithmeticWith0Test"
QT_MOC_LITERAL(249, 26), // "binaryArithmeticAddSubTest"
QT_MOC_LITERAL(276, 26), // "binaryArithmeticDivModTest"
QT_MOC_LITERAL(303, 23), // "binaryArithmeticBigTest"
QT_MOC_LITERAL(327, 34), // "binaryArithmeticSubtractionBi..."
QT_MOC_LITERAL(362, 37), // "binaryArithmeticMultiplicatio..."
QT_MOC_LITERAL(400, 27), // "binaryArithmeticBaseDivTest"
QT_MOC_LITERAL(428, 26), // "binaryArithmeticBigDivTest"
QT_MOC_LITERAL(455, 27), // "binaryArithmeticBaseModTest"
QT_MOC_LITERAL(483, 26), // "binaryArithmeticBigModTest"
QT_MOC_LITERAL(510, 13), // "incrementTest"
QT_MOC_LITERAL(524, 13), // "decrementTest"
QT_MOC_LITERAL(538, 23), // "relationalOperatorsTest"
QT_MOC_LITERAL(562, 30), // "relationalOperatorsBigIntsTest"
QT_MOC_LITERAL(593, 12), // "shiftingTest"
QT_MOC_LITERAL(606, 7), // "binTest"
QT_MOC_LITERAL(614, 13), // "testOperators"
QT_MOC_LITERAL(628, 16) // "constructorsTest"

    },
    "arithmetictests\0arithmeticAssignmentAdditionTest\0"
    "\0arithmeticAssignmentSubtractionTest\0"
    "arithmeticAssignmentMultiplicationTest\0"
    "arithmeticAssignmentDivisionTest\0"
    "arithmeticAssignmentModuloTest\0"
    "binaryArithmeticWithIntStrBigTest\0"
    "binaryArithmeticWith0Test\0"
    "binaryArithmeticAddSubTest\0"
    "binaryArithmeticDivModTest\0"
    "binaryArithmeticBigTest\0"
    "binaryArithmeticSubtractionBigTest\0"
    "binaryArithmeticMultiplicationBigTest\0"
    "binaryArithmeticBaseDivTest\0"
    "binaryArithmeticBigDivTest\0"
    "binaryArithmeticBaseModTest\0"
    "binaryArithmeticBigModTest\0incrementTest\0"
    "decrementTest\0relationalOperatorsTest\0"
    "relationalOperatorsBigIntsTest\0"
    "shiftingTest\0binTest\0testOperators\0"
    "constructorsTest"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_arithmetictests[] = {

 // content:
      10,       // revision
       0,       // classname
       0,    0, // classinfo
      24,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  158,    2, 0x08,    1 /* Private */,
       3,    0,  159,    2, 0x08,    2 /* Private */,
       4,    0,  160,    2, 0x08,    3 /* Private */,
       5,    0,  161,    2, 0x08,    4 /* Private */,
       6,    0,  162,    2, 0x08,    5 /* Private */,
       7,    0,  163,    2, 0x08,    6 /* Private */,
       8,    0,  164,    2, 0x08,    7 /* Private */,
       9,    0,  165,    2, 0x08,    8 /* Private */,
      10,    0,  166,    2, 0x08,    9 /* Private */,
      11,    0,  167,    2, 0x08,   10 /* Private */,
      12,    0,  168,    2, 0x08,   11 /* Private */,
      13,    0,  169,    2, 0x08,   12 /* Private */,
      14,    0,  170,    2, 0x08,   13 /* Private */,
      15,    0,  171,    2, 0x08,   14 /* Private */,
      16,    0,  172,    2, 0x08,   15 /* Private */,
      17,    0,  173,    2, 0x08,   16 /* Private */,
      18,    0,  174,    2, 0x08,   17 /* Private */,
      19,    0,  175,    2, 0x08,   18 /* Private */,
      20,    0,  176,    2, 0x08,   19 /* Private */,
      21,    0,  177,    2, 0x08,   20 /* Private */,
      22,    0,  178,    2, 0x08,   21 /* Private */,
      23,    0,  179,    2, 0x08,   22 /* Private */,
      24,    0,  180,    2, 0x08,   23 /* Private */,
      25,    0,  181,    2, 0x08,   24 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void arithmetictests::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<arithmetictests *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->arithmeticAssignmentAdditionTest(); break;
        case 1: _t->arithmeticAssignmentSubtractionTest(); break;
        case 2: _t->arithmeticAssignmentMultiplicationTest(); break;
        case 3: _t->arithmeticAssignmentDivisionTest(); break;
        case 4: _t->arithmeticAssignmentModuloTest(); break;
        case 5: _t->binaryArithmeticWithIntStrBigTest(); break;
        case 6: _t->binaryArithmeticWith0Test(); break;
        case 7: _t->binaryArithmeticAddSubTest(); break;
        case 8: _t->binaryArithmeticDivModTest(); break;
        case 9: _t->binaryArithmeticBigTest(); break;
        case 10: _t->binaryArithmeticSubtractionBigTest(); break;
        case 11: _t->binaryArithmeticMultiplicationBigTest(); break;
        case 12: _t->binaryArithmeticBaseDivTest(); break;
        case 13: _t->binaryArithmeticBigDivTest(); break;
        case 14: _t->binaryArithmeticBaseModTest(); break;
        case 15: _t->binaryArithmeticBigModTest(); break;
        case 16: _t->incrementTest(); break;
        case 17: _t->decrementTest(); break;
        case 18: _t->relationalOperatorsTest(); break;
        case 19: _t->relationalOperatorsBigIntsTest(); break;
        case 20: _t->shiftingTest(); break;
        case 21: _t->binTest(); break;
        case 22: _t->testOperators(); break;
        case 23: _t->constructorsTest(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject arithmetictests::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_arithmetictests.offsetsAndSize,
    qt_meta_data_arithmetictests,
    qt_static_metacall,
    nullptr,
qt_incomplete_metaTypeArray<qt_meta_stringdata_arithmetictests_t
, QtPrivate::TypeAndForceComplete<arithmetictests, std::true_type>
, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>, QtPrivate::TypeAndForceComplete<void, std::false_type>


>,
    nullptr
} };


const QMetaObject *arithmetictests::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *arithmetictests::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_arithmetictests.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int arithmetictests::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 24)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 24;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 24)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 24;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
